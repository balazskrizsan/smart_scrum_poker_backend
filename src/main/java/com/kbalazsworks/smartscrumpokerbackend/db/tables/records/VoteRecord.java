/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.smartscrumpokerbackend.db.tables.records;


import com.kbalazsworks.smartscrumpokerbackend.db.tables.Vote;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VoteRecord extends UpdatableRecordImpl<VoteRecord> implements Record7<Long, Short, Short, Short, Short, LocalDateTime, String> {

    private static final long serialVersionUID = -652333701;

    /**
     * Setter for <code>public.vote.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.vote.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.vote.uncertainty</code>.
     */
    public void setUncertainty(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.vote.uncertainty</code>.
     */
    public Short getUncertainty() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>public.vote.complexity</code>.
     */
    public void setComplexity(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.vote.complexity</code>.
     */
    public Short getComplexity() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>public.vote.effort</code>.
     */
    public void setEffort(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.vote.effort</code>.
     */
    public Short getEffort() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>public.vote.calculated_point</code>.
     */
    public void setCalculatedPoint(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.vote.calculated_point</code>.
     */
    public Short getCalculatedPoint() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>public.vote.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.vote.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.vote.created_by</code>.
     */
    public void setCreatedBy(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.vote.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Short, Short, Short, Short, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, Short, Short, Short, Short, LocalDateTime, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Vote.VOTE.ID;
    }

    @Override
    public Field<Short> field2() {
        return Vote.VOTE.UNCERTAINTY;
    }

    @Override
    public Field<Short> field3() {
        return Vote.VOTE.COMPLEXITY;
    }

    @Override
    public Field<Short> field4() {
        return Vote.VOTE.EFFORT;
    }

    @Override
    public Field<Short> field5() {
        return Vote.VOTE.CALCULATED_POINT;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Vote.VOTE.CREATED_AT;
    }

    @Override
    public Field<String> field7() {
        return Vote.VOTE.CREATED_BY;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Short component2() {
        return getUncertainty();
    }

    @Override
    public Short component3() {
        return getComplexity();
    }

    @Override
    public Short component4() {
        return getEffort();
    }

    @Override
    public Short component5() {
        return getCalculatedPoint();
    }

    @Override
    public LocalDateTime component6() {
        return getCreatedAt();
    }

    @Override
    public String component7() {
        return getCreatedBy();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Short value2() {
        return getUncertainty();
    }

    @Override
    public Short value3() {
        return getComplexity();
    }

    @Override
    public Short value4() {
        return getEffort();
    }

    @Override
    public Short value5() {
        return getCalculatedPoint();
    }

    @Override
    public LocalDateTime value6() {
        return getCreatedAt();
    }

    @Override
    public String value7() {
        return getCreatedBy();
    }

    @Override
    public VoteRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public VoteRecord value2(Short value) {
        setUncertainty(value);
        return this;
    }

    @Override
    public VoteRecord value3(Short value) {
        setComplexity(value);
        return this;
    }

    @Override
    public VoteRecord value4(Short value) {
        setEffort(value);
        return this;
    }

    @Override
    public VoteRecord value5(Short value) {
        setCalculatedPoint(value);
        return this;
    }

    @Override
    public VoteRecord value6(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public VoteRecord value7(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public VoteRecord values(Long value1, Short value2, Short value3, Short value4, Short value5, LocalDateTime value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached VoteRecord
     */
    public VoteRecord() {
        super(Vote.VOTE);
    }

    /**
     * Create a detached, initialised VoteRecord
     */
    public VoteRecord(Long id, Short uncertainty, Short complexity, Short effort, Short calculatedPoint, LocalDateTime createdAt, String createdBy) {
        super(Vote.VOTE);

        set(0, id);
        set(1, uncertainty);
        set(2, complexity);
        set(3, effort);
        set(4, calculatedPoint);
        set(5, createdAt);
        set(6, createdBy);
    }
}
