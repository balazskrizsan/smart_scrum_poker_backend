/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.smartscrumpokerbackend.db.tables;


import com.kbalazsworks.smartscrumpokerbackend.db.Keys;
import com.kbalazsworks.smartscrumpokerbackend.db.Public;
import com.kbalazsworks.smartscrumpokerbackend.db.tables.records.PokersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pokers extends TableImpl<PokersRecord> {

    private static final long serialVersionUID = 581299538;

    /**
     * The reference instance of <code>public.pokers</code>
     */
    public static final Pokers POKERS = new Pokers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PokersRecord> getRecordType() {
        return PokersRecord.class;
    }

    /**
     * The column <code>public.pokers.id</code>.
     */
    public final TableField<PokersRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pokers.id_secure</code>.
     */
    public final TableField<PokersRecord, UUID> ID_SECURE = createField(DSL.name("id_secure"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.pokers.name</code>.
     */
    public final TableField<PokersRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.pokers.created_at</code>.
     */
    public final TableField<PokersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.pokers.created_by</code>.
     */
    public final TableField<PokersRecord, String> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.CHAR(36), this, "");

    /**
     * Create a <code>public.pokers</code> table reference
     */
    public Pokers() {
        this(DSL.name("pokers"), null);
    }

    /**
     * Create an aliased <code>public.pokers</code> table reference
     */
    public Pokers(String alias) {
        this(DSL.name(alias), POKERS);
    }

    /**
     * Create an aliased <code>public.pokers</code> table reference
     */
    public Pokers(Name alias) {
        this(alias, POKERS);
    }

    private Pokers(Name alias, Table<PokersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pokers(Name alias, Table<PokersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Pokers(Table<O> child, ForeignKey<O, PokersRecord> key) {
        super(child, key, POKERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PokersRecord, Long> getIdentity() {
        return Keys.IDENTITY_POKERS;
    }

    @Override
    public UniqueKey<PokersRecord> getPrimaryKey() {
        return Keys.POKERS_PK;
    }

    @Override
    public List<UniqueKey<PokersRecord>> getKeys() {
        return Arrays.<UniqueKey<PokersRecord>>asList(Keys.POKERS_PK);
    }

    @Override
    public Pokers as(String alias) {
        return new Pokers(DSL.name(alias), this);
    }

    @Override
    public Pokers as(Name alias) {
        return new Pokers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pokers rename(String name) {
        return new Pokers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pokers rename(Name name) {
        return new Pokers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, UUID, String, LocalDateTime, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
