/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.smartscrumpokerbackend.db.tables.records;


import com.kbalazsworks.smartscrumpokerbackend.db.tables.Ticket;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketRecord extends UpdatableRecordImpl<TicketRecord> implements Record3<Long, Long, String> {

    private static final long serialVersionUID = 188772680;

    /**
     * Setter for <code>public.ticket.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.ticket.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.ticket.poker_id</code>.
     */
    public void setPokerId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.ticket.poker_id</code>.
     */
    public Long getPokerId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.ticket.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.ticket.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Ticket.TICKET.ID;
    }

    @Override
    public Field<Long> field2() {
        return Ticket.TICKET.POKER_ID;
    }

    @Override
    public Field<String> field3() {
        return Ticket.TICKET.NAME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getPokerId();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getPokerId();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public TicketRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TicketRecord value2(Long value) {
        setPokerId(value);
        return this;
    }

    @Override
    public TicketRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public TicketRecord values(Long value1, Long value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TicketRecord
     */
    public TicketRecord() {
        super(Ticket.TICKET);
    }

    /**
     * Create a detached, initialised TicketRecord
     */
    public TicketRecord(Long id, Long pokerId, String name) {
        super(Ticket.TICKET);

        set(0, id);
        set(1, pokerId);
        set(2, name);
    }
}
